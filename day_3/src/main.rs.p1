use std::collections::HashMap;
use std::fs::File;
use std::io::{BufRead,BufReader};



fn main() {
    let f = File::open("input.txt").unwrap();
    let reader = BufReader::new(f);
    let mut repeats: Vec<char> = vec![];
    for line in reader.lines() {
        let split_line: Vec<char> = line.unwrap().chars().collect();
        let half = split_line.clone().len()/2;
        let mut first_half = &mut split_line.clone()[..half];
        let mut last = ' ';
        first_half.sort();
        let second_half = &split_line[half..];
        for val in first_half.iter(){
            if *val != last{
                last = *val;
                if let Some(ans) = second_half.iter().find(|v| &val==v){
                    repeats.push(*ans);
                }else{
                }
            }
        }
    }
    let translator = HashMap::from([

        ('a',1),
        ('b',2),
        ('c',3),
        ('d',4),
        ('e',5),
        ('f',6),
        ('g',7),
        ('h',8),
        ('i',9),
        ('j',10),
        ('k',11),
        ('l',12),
        ('m',13),
        ('n',14),
        ('o',15),
        ('p',16),
        ('q',17),
        ('r',18),
        ('s',19),
        ('t',20),
        ('u',21),
        ('v',22),
        ('w',23),
        ('x',24),
        ('y',25),
        ('z',26),
        ('A',27),
        ('B',28),
        ('C',29),
        ('D',30),
        ('E',31),
        ('F',32),
        ('G',33),
        ('H',34),
        ('I',35),
        ('J',36),
        ('K',37),
        ('L',38),
        ('M',39),
        ('N',40),
        ('O',41),
        ('P',42),
        ('Q',43),
        ('R',44),
        ('S',45),
        ('T',46),
        ('U',47),
        ('V',48),
        ('W',49),
        ('X',50),
        ('Y',51),
        ('Z',52),
    ]
    );
    //repeats.sort();
    let mut total = 0;
    for items in repeats.iter(){
        println!("{}",items.clone());
        total +=translator.get_key_value(items).unwrap().1;
    }
    println!("{}",total);
}

